// Generated by CoffeeScript 1.3.3
(function() {
  var GeoChart, HexChart, HexContainer, container, drgs, first, geoChart, renderContainer, renderMap, second, storeDrgs,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  HexContainer = (function() {

    function HexContainer(div) {
      this.div = div;
      this.margin = {
        top: 5,
        bottom: 0,
        left: 0,
        right: 10
      };
      this.selected = [];
      this.width = 800 - this.margin.left - this.margin.right;
      this.height = 140 - this.margin.top - this.margin.bottom;
      this.svg = d3.select(this.div).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
    }

    return HexContainer;

  })();

  HexChart = (function() {

    function HexChart(data, geo, container, indicator, yPosition) {
      this.data = data;
      this.geo = geo;
      this.container = container;
      this.indicator = indicator;
      this.yPosition = yPosition;
      this.xIndicator = __bind(this.xIndicator, this);

      this.brushEnd = __bind(this.brushEnd, this);

      this.brushMove = __bind(this.brushMove, this);

      this.color = d3.scale.linear().range(["white", "red"]).interpolate(d3.interpolateLab);
      this.xScale = d3.scale.linear().range([0, this.container.width]);
      this.hexHeight = 25;
      this.hexRadius = 2;
      this.height = this.container.height;
      this.width = this.container.width;
      this.yScale = d3.scale.linear().range([this.hexHeight, 1]).domain([this.hexHeight, 1]);
      this.xAxis = d3.svg.axis().scale(this.xScale).ticks(7).tickSize(10).tickPadding("4").orient("bottom");
      this.hexbin = d3.hexbin().size([this.container.width, this.hexHeight]).radius(this.hexRadius);
      this.brush = d3.svg.brush().x(this.xScale).on("brush", this.brushMove).on("brushend", this.brushEnd);
      this.svg = this.container.svg.append("g").attr("transform", "translate(" + 0 + "," + this.yPosition + ")");
      this.text = this.svg.append("text").attr("x", this.width / 4).attr("y", -4).text("");
      this.svg.append("clipPath").attr("id", "clip").append("rect").attr("class", "mesh").attr("width", this.width).attr("height", this.hexHeight);
    }

    HexChart.prototype.updateData = function(data) {
      return this.data = data;
    };

    HexChart.prototype.brushMove = function() {
      var e, selected;
      e = d3.event.target.extent();
      selected = [];
      this.data.forEach(function(d) {
        if (e[0] <= d.x && d.x <= e[1]) {
          return selected.push(d);
        }
      });
      return this.geo.renderSelected(selected, this.indicator, e[0], e[1]);
    };

    HexChart.prototype.brushEnd = function() {};

    HexChart.prototype.xIndicator = function(d) {
      if (this.indicator === 'payments') {
        return d.avg_total_payments;
      } else {
        return d.avg_covered_charges;
      }
    };

    HexChart.prototype.render = function() {
      var points,
        _this = this;
      points = [];
      this.xScale.domain(d3.extent(this.data, this.xIndicator));
      this.xAxis.scale(this.xScale);
      this.data.forEach(function(d, i) {
        d.x = _this.xIndicator(d);
        d.y = 1;
        return _.range(1, 43, 3).forEach(function(y) {
          return points.push([_this.xScale(d.x), _this.yScale(y)]);
        });
      });
      this.color.domain([
        0, d3.max(this.hexbin(points), function(d) {
          return d.length * 0.5;
        })
      ]);
      this.svg.select("g.x.axis").remove();
      this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.hexHeight + ")").call(this.xAxis);
      if (this.hexagons) {
        this.hexagons.remove();
      }
      this.hexagons = this.svg.append("g").attr("clip-path", "url(#clip)").selectAll(".hexagon").data(this.hexbin(points)).enter().append("path").attr("class", "hexagon").attr("d", this.hexbin.hexagon()).attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      }).style("fill", function(d) {
        return _this.color(d.length);
      });
      this.svg.append("g").attr("class", "brush").call(this.brush).selectAll("rect").attr("y", 0).attr("height", this.hexHeight);
      return this.geo.renderProviders(this.data);
    };

    return HexChart;

  })();

  GeoChart = (function() {

    function GeoChart(topology, div) {
      this.topology = topology;
      this.div = div;
      this.renderSelected = __bind(this.renderSelected, this);

      this.mouseUp = __bind(this.mouseUp, this);

      this.mouseDown = __bind(this.mouseDown, this);

      this.mouseOut = __bind(this.mouseOut, this);

      this.mouseOver = __bind(this.mouseOver, this);

      this.findSimilar = __bind(this.findSimilar, this);

      this.tooltipText = __bind(this.tooltipText, this);

      this.handleStateClick = __bind(this.handleStateClick, this);

      this.margin = {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };
      this.width = 900 - this.margin.left - this.margin.right;
      this.height = 640 - this.margin.top - this.margin.bottom;
      this.projection = d3.geo.albersUsa().scale(1100).translate([480, 270]);
      this.path = d3.geo.path().projection(this.projection);
      this.precisionFormat = d3.format(".2f");
      this.centered;
      this.states = [];
      this.circles = [];
      this.selected = {
        charges: [],
        payments: []
      };
      this.color = d3.scale.quantize().range(colorbrewer.Reds[9]);
      this.svg = d3.select(this.div).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
    }

    GeoChart.prototype.handleStateClick = function(d) {
      var centroid, k, x, y, z;
      x = null;
      y = null;
      z = null;
      if (d && this.centered !== d) {
        centroid = this.path.centroid(d);
        x = centroid[0];
        y = centroid[1];
        k = 4;
        this.centered = d;
      } else {
        x = this.width / 2;
        y = this.height / 2;
        k = 1;
        this.centered = null;
      }
      this.states.classed("inactive", this.centered && function(d) {
        return d !== this.centered;
      });
      return this.states.transition().duration(750).attr("transform", "translate(" + this.width / 2 + "," + this.height / 2 + ")scale(" + k + ")translate(" + -x + "," + -y + ")").style("stroke-width", 1.5 / k + "px");
    };

    GeoChart.prototype.render = function() {
      var geometries;
      geometries = topojson.object(this.topology, this.topology.objects.states).geometries.filter(function(d) {
        return d.properties.code !== 'VI' && d.properties.code !== 'PR';
      });
      return this.states = this.svg.selectAll("path").data(geometries).enter().append("path").attr("d", this.path).on("click", this.handleStateClick);
    };

    GeoChart.prototype.renderChrolopeth = function(providers) {
      var statesFrequency,
        _this = this;
      statesFrequency = {};
      providers.forEach(function(p) {
        if (statesFrequency[p]) {
          return statesFrequency[p] += 1;
        } else {
          return statesFrequency[p] = 1;
        }
      });
      this.color.domain([0, d3.max(_.values(statesFrequency))]);
      return this.states.style("fill", function(d) {
        return _this.color(statesFrequency[d.properties.code] || 0);
      });
    };

    GeoChart.prototype.attachTooltips = function() {
      return $("circle").tooltip({
        position: {
          my: "left+15 center",
          at: "top center"
        },
        show: true
      });
    };

    GeoChart.prototype.tooltipText = function(d) {
      return d.provider_name + "<br/>" + d.provider_city + ", " + d.state_code + "<br/>Avg payments: " + this.precisionFormat(d.avg_total_payments) + "<br/>Charges: " + this.precisionFormat(d.avg_covered_charges);
    };

    GeoChart.prototype.findSimilar = function(selected) {
      var threshold;
      threshold = 10.0;
      return this.svg.selectAll("circle.shown").each(function(d) {
        var circle;
        circle = d3.select(this);
        if (Math.abs(d.avg_total_payments - selected.avg_total_payments) < threshold) {
          return circle.attr("r", 10);
        } else {
          return circle.attr("r", 0);
        }
      });
    };

    GeoChart.prototype.mouseOver = function(d) {
      $(".panel-body p").text(d.provider_name + ", " + d.provider_city + ", " + d.state_code);
      $("#charges-text").val("$ " + Math.floor(d.avg_covered_charges));
      $("#payments-text").val("$ " + Math.floor(d.avg_total_payments));
      return $("#discharges-text").val(d.total_discharges);
    };

    GeoChart.prototype.mouseOut = function(d) {
      $(".panel-body p").text("");
      $("#charges-text").val("");
      $("#payments-text").val("");
      return $("#discharges-text").val("");
    };

    GeoChart.prototype.mouseDown = function(d) {
      var selected;
      selected = d3.select(d3.event.target);
      this.findSimilar(d);
      return selected.attr("r", 10);
    };

    GeoChart.prototype.mouseUp = function(d) {
      var selected;
      selected = d3.select(d3.event.target);
      selected.attr("r", 4);
      return this.svg.selectAll("circle.shown").each(function(d) {
        return d3.select(this).attr("r", 4);
      });
    };

    GeoChart.prototype.renderSelected = function(providers, bucket, left, right) {
      var ids, intersection, leftText, other, otherAttr, rightText;
      ids = _.pluck(providers, 'provider_id');
      this.selected[bucket] = ids;
      otherAttr = bucket === 'charges' ? 'payments' : 'charges';
      other = this.selected[otherAttr];
      intersection = [];
      if (_.isEmpty(other) && !_.isEmpty(ids)) {
        intersection = ids;
      } else if (_.isEmpty(ids) && !_.isEmpty(other)) {
        intersection = other;
      } else {
        intersection = _.intersection(ids, other);
      }
      d3.select("#provider-count").text(intersection.length);
      leftText = "$ " + Math.floor(left);
      rightText = "$ " + Math.floor(right);
      if (bucket === 'charges') {
        d3.select("#charges-left").text(leftText);
        d3.select("#charges-right").text(rightText);
      } else {
        d3.select("#payments-left").text(leftText);
        d3.select("#payments-right").text(rightText);
      }
      return this.svg.selectAll("circle").each(function(d) {
        if (_.contains(intersection, d.provider_id)) {
          return d3.select(this).attr("r", 4).classed("shown", true);
        } else {
          return d3.select(this).attr("r", 0).classed("shown", false);
        }
      });
    };

    GeoChart.prototype.renderProviders = function(providers) {
      var geoPositions, that,
        _this = this;
      that = this;
      d3.select("#provider-count").text(providers.length);
      geoPositions = [];
      providers.forEach(function(o) {
        var location;
        location = [+o.longitude, +o.latitude];
        return geoPositions.push(_this.projection(location));
      });
      this.svg.selectAll("circle").remove();
      this.svg.selectAll("circle").data(providers).enter().append("circle").attr("class", "shown").attr("title", this.tooltipText).on("mouseover", function(d) {
        d3.select(this).style("fill-opacity", 1.0).style("stroke-width", 1.0);
        return that.mouseOver(d);
      }).on("mouseout", function(d) {
        d3.select(this).style("fill-opacity", 0.5).style("stroke-width", 0.2);
        return that.mouseOut(d);
      }).attr("r", 4).attr("cx", function(d, i) {
        return geoPositions[i][0];
      }).attr("cy", function(d, i) {
        return geoPositions[i][1];
      });
      return this.attachTooltips();
    };

    return GeoChart;

  })();

  geoChart = null;

  drgs = [];

  container = new HexContainer('#chart');

  first = null;

  second = null;

  $(function() {
    return $(".dropdown-menu").on("click", "li a", function(e) {
      var $target, href, id, name;
      $target = $(e.currentTarget);
      href = $target.attr('href');
      name = $target.text();
      $("#select-msg").text(name);
      id = href.replace("#", "");
      return d3.json("/providers/inpatient_charges.json?id=" + id, renderContainer);
    });
  });

  storeDrgs = function(error, data) {
    drgs = data;
    return data.forEach(function(d) {
      var elem;
      elem = "<li><a href='#" + d.id + "'>" + d.definition + "</a></li>";
      return $(".dropdown-menu").append(elem);
    });
  };

  renderMap = function(error, data) {
    geoChart = new GeoChart(data, '#map');
    return geoChart.render();
  };

  renderContainer = function(error, data) {
    var cloned;
    if (!first) {
      first = new HexChart(data, geoChart, container, 'charges', 0);
    } else {
      first.data = data;
    }
    cloned = JSON.parse(JSON.stringify(data));
    if (!second) {
      second = new HexChart(cloned, geoChart, container, 'payments', 80);
    } else {
      second.data = cloned;
    }
    first.render();
    return second.render();
  };

  d3.json("/providers/drgs.json", storeDrgs);

  d3.json("us-named.json", renderMap);

}).call(this);
